#!/usr/bin/env python
# -*- coding: utf-8 -*-

from collections import OrderedDict
import readline
import string
import sys

yaml_book = """
- id: {key}
  type: {book}
  author:
  - family: {author_family}
    given: {author_given}
    non-dropping-particle: {particles}
  issued:
  - year: {year}
  title: '{title}' 
  publisher: {publisher}
  publisher-place: {location}
"""

template_incollection = """
@incollection{{{key},
    Author = {{{author}}},
    Title = {{{title}}},
    Pages = {{{pages}}},
    Year = {{{year}}},
    Booktitle = {{{booktitle}}},
    Editor = {{{editor}}},
    Location = {{{location}}},
    Publisher = {{{publisher}}},
    Series = {{{series}}},
    Number = {{{number}}},
}}
"""

template_book = """
@book{{{key},
    Author={{{author}}},
    Title={{{title}}},
    Year={{{year}}},
    Series={{{series}}},
    Number={{{number}}},
    Edition={{{edition}}},
    Location={{{location}}},
    Publisher={{{publisher}}},
}}
"""

template_article = """
@article{{{key}'
    Author={{{author}}},
    Title={{{title}}},
    Pages={{{pages}}},
    Year={{{year}}},
    Journal={{{journal}}},
    Number={{{number}}},
}}
"""

TEMPLATES = {
    'yaml_book': yaml_book,
    'book': template_book,
    'article': template_article,
    'incollection': template_incollection,
}


def get_fields(template):
    formatter = string.Formatter()
    # return OrderedDict((fn, None) for _, fn, _, _ in formatter.parse(template)
    #                    if fn)
    return {fn: None for _, fn, _, _ in formatter.parse(template) if fn}

def get_input(t):
    fields = {k: input('{}: '.format(k)) for k in get_fields(t).keys()}
    return t.format_map(fields)


def halp():
    return 'Usage: {} [book | article | in]' \
           '--help'.format(sys.argv[0])


if __name__ == "__main__":
    try:
        if (sys.argv[1] == '-f'):
            inp = 2;
        else:
            inp = 1;
        entry = get_input(TEMPLATES[sys.argv[inp]])
    except KeyError as e:
        raise SystemExit('Error: {e} -- no such template\n')
    except IndexError:
        raise SystemExit(halp())

    if (inp == 2):
        rfile = 'refs.bib'
        with open(rfile, 'a') as rf:
            rf.write(entry)
    else:
        print(entry)
