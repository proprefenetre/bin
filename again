#!/usr/bin/env python
# -*- coding: utf-8 -*-

# source meteorological data: http://buienradar.nl

from collections import OrderedDict
import xml.etree.ElementTree as etree
from urllib.request import urlopen
from urllib.error import URLError
import time
import sys


def isvalidfloat(s):
    try:
        float(s)
        return True
    except ValueError:
        return False


def get_tree():    
    try:
        with urlopen('http://xml.buienradar.nl/') as xml:
            tree = etree.parse(xml)
        return tree
    except URLError:
        return 'offline again'


class WeatherStation:
    
    tree = get_tree()

    def __init__(self, local_ws):
        self.ws = local_ws

        try: 
            root = self.tree.getroot()
        except TypeError:
            return 'offline again'

        for e in root.findall('.//weerstations/*[stationnaam="Meetstation {}"]//'
                              .format(local_ws)):
            attr = e.tag
            val = e.text if 'zin' not in e.attrib else e.attrib['zin']
            if hasattr(self, attr):
                raise AttributeError("Attribute '{}' already"
                                     " defined".format(attr))
            else:
                setattr(self, '{}'.format(attr), val)

    @classmethod
    def meetstations(cls):
        root = cls.tree.getroot()
        stations = [(s.text.replace('Meetstation ', ''), s.attrib['regio'])
                    for s in root.findall('.//stationnaam')]
        stations.sort()
        return stations

    def summary(self):
        return self.icoonactueel

    def temperatuur(self, unit='C'):
        t = float(self.temperatuurGC) * 9 / 5 + 32 if unit == 'F' else self.temperatuurGC
        return '{} °{}'.format(t, unit)

    def wind(self, unit='bf'):
        if unit == 'bf':
            windsnelheid = self.windsnelheidBF
        elif unit == 'ms':
            windsnelheid = self.windsnelhedMS
        else:
            raise TypeError('"{}" - no such unit for wind speed'.format(unit))
        return '{}{}'.format(windsnelheid, unit)

    def wind_direction(self, deg=False):
        if deg:
            return '{}°'.format(self.windrichtingGR)
        else:
            return self.windrichting

    def windstoten(self):
        return '{} ms'.format(self.windstotenMS)

    def regen(self, mm=False):
        if isvalidfloat(self.regenMMPU):
            if mm:
                return '{} mm'.format(round(float(self.regenMMPU), 2))
            else:
                return 'regen'
        else:
            return 'droog'

    def report(self, funcs):
        report = {}
        for func in funcs:
            report[func] = getattr(self, func)()
        return report


if __name__ == "__main__":

    try:
        vsch = WeatherStation('Voorschoten')

        print(' {}, {} '.format(vsch.temperatuur(), vsch.summary()))
    except:
        raise
