#! /usr/bin/env python

from itertools import zip_longest
import numpy as np
from scipy import stats
import sys


def contingency(table, yates):
    res = stats.chi2_contingency(table, correction=yates)
    return "chi2 = {}\np = {}\ndf = {}".format(*res)


def usage():
    print("prop-test: calculate chi2 from a 2x2 contingency table (w/ Yate's correction)")
    print("usage: \n"
          "\tprop-test [row1 row1], [row2 row2]")
    sys.exit()


def grouper(iterable, n, fillvalue=None):
    "Collect data into fixed-length chunks or blocks"
    # grouper('ABCDEFG', 3, 'x') --> ABC DEF Gxx"
    args = [iter(iterable)] * n
    return zip_longest(*args, fillvalue=fillvalue)


def run():
    if len(sys.argv) < 5:
        usage()
    else:
        yates = False
        rows = [float(i.strip(",[] ")) for i in sys.argv[1:]]
        if any([x <= 5 for x in rows]):
            yates = True
        print(contingency(np.array([list(r) for r in grouper(rows, 2)]),
                          yates))


if __name__ == "__main__":
    run()
